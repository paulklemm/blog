<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homebrew on Zenf</title>
    <link>http://paulklemm.com/blog/categories/homebrew/index.xml</link>
    <description>Recent content in Homebrew on Zenf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://paulklemm.com/blog/categories/homebrew/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Watch Twitch using VLC in macOS</title>
      <link>http://paulklemm.com/blog/2013-12-07-watch-twitch-using-vlc-in-osx/</link>
      <pubDate>Sat, 07 Dec 2013 00:20:42 +0000</pubDate>
      
      <guid>http://paulklemm.com/blog/2013-12-07-watch-twitch-using-vlc-in-osx/</guid>
      <description>

&lt;p&gt;If you own a Retina-Macbook you problably struggle with fairly high CPU load and bad performance when watching Twitch-channels using the standard flash-based player in the browser.&lt;/p&gt;

&lt;p&gt;A tool called &lt;code&gt;livestreamer&lt;/code&gt; can be used to bring Twitch streams to the beloved VLC player (which also uses the GPU to process videos). This way you are not just able to reduce the used resources, the streams also feel much smoother, especially for high resolutions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Twitch will not be able to stream ads if you use this solution.&lt;/em&gt;
&lt;em&gt;Please be fair and subscribe to channels you like and you support.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Update 2017-05-09] Streamlink as replacement for abandoned Livestreamer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The authors of &lt;a href=&#34;https://github.com/chrippa/livestreamer&#34;&gt;Livestreamer&lt;/a&gt; abandoned the project. I recommend you use a fork of Livestreamer called &lt;a href=&#34;https://streamlink.github.io/&#34;&gt;Streamlink&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You install it via &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;pip install streamlink
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;[Update 2014-02-20]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using the glorious &lt;a href=&#34;http://www.alfredapp.com&#34;&gt;Alfred App&lt;/a&gt; you might be interested in this workflow, which allows for the same thing: &lt;a href=&#34;http://www.packal.org/workflow/twitchstreamer&#34;&gt;http://www.packal.org/workflow/twitchstreamer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Update 2014-03-06]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Added updating instructions.&lt;/p&gt;

&lt;h2 id=&#34;install-livestreamer&#34;&gt;Install Livestreamer&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Download and install &lt;code&gt;rtmpdump&lt;/code&gt; from &lt;a href=&#34;http://trick77.com/wp-content/uploads/2008/01/rtmpdump-2.4_mac_os.zip&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download &lt;code&gt;python-setuptools&lt;/code&gt; from &lt;a href=&#34;https://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg#md5=fe1f997bc722265116870bc7919059ea&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;Terminal.app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Navigate to the folder where you downloaded the Egg-File and install it
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; ~/Downloads
sh setuptools-0.6c11-py2.7.egg
&lt;span style=&#34;color: #75715e&#34;&gt;# Maybe you need to run it as sudo - `sudo sh setuptools-0.6c11-py2.7.egg`&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;% endcodeblock %&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
- Clone &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;Livestreamer&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt; GIT Repository and install &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;Livestreamer&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;% codeblock lang:bash %&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
git clone git://github.com/chrippa/livestreamer.git
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; livestreamer
python setup.py install
&lt;span style=&#34;color: #75715e&#34;&gt;# Again, maybe you need to run it as sudo - `sudo python setup.py install`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you should be able to view Twitch channels in VLC&lt;/p&gt;

&lt;h2 id=&#34;using-livestreamer&#34;&gt;Using Livestreamer&lt;/h2&gt;

&lt;p&gt;Say you want to view this Twitch channel in VLC: &lt;a href=&#34;http://www.twitch.tv/wcs_europe&#34;&gt;http://www.twitch.tv/wcs_europe&lt;/a&gt;.
All you have to to is go into the &lt;code&gt;Terminal.app&lt;/code&gt; and type
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;livestreamer http://www.twitch.tv/wcs_europe &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;quality&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# You might as well skip the `http://www.` part&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Here, &lt;code&gt;[quality]&lt;/code&gt; has to be a quality setting from the stream, usually ranging between &lt;code&gt;low&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, &lt;code&gt;high&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt;. If you leave it empty, &lt;code&gt;livestreamer&lt;/code&gt; will tell you, which options you can choose from. Setting the parameter to &lt;code&gt;best&lt;/code&gt; tells &lt;code&gt;livestreamer&lt;/code&gt; to use the highest quality available.&lt;/p&gt;

&lt;p&gt;Et voil√°. Enjoy your stream.

&lt;figure &gt;
    
        &lt;img src=&#34;http://paulklemm.com/blog/blog/media/2013-12-07-watch-twitch-using-vlc-in-osx/twitch-vlc-sc2_small.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;update-livestreamer&#34;&gt;Update Livestreamer&lt;/h2&gt;

&lt;p&gt;If you see a message like this when launching &lt;code&gt;livestreamer&lt;/code&gt; you might update to the latest version:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;cli&lt;span style=&#34;color: #f92672&#34;&gt;][&lt;/span&gt;info&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; A new version of Livestreamer &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;1.7.4&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; is available!
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To do so, navigate to any folder, for example &lt;code&gt;~/Downloads&lt;/code&gt;, and run the following commands:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; ~/Downloads
git clone git://github.com/chrippa/livestreamer.git
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; livestreamer
python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;After that you can remove the livestreamer folder from the folder you cloned the GIT repository to (&lt;code&gt;~/Downloads/livestreamer&lt;/code&gt; in our example).&lt;/p&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Links and instructions how to install everything is taken from different Posts in this [Gamespot Thread](&lt;a href=&#34;http://forum.gamesports.net/dota/showthread.php?45027-How-to-watch-Twitch-TV-in-VLC-player-(MAC-OSX-HOW-TO&#34;&gt;http://forum.gamesports.net/dota/showthread.php?45027-How-to-watch-Twitch-TV-in-VLC-player-(MAC-OSX-HOW-TO&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;For further information, visit &lt;a href=&#34;http://livestreamer.tanuki.se/en/latest/&#34;&gt;this site from the livestreamer developer&lt;/a&gt;, which offers more detailed instructions&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Install Python with VTK and Qt support for use with Eclipse in OS X Mountain Lion</title>
      <link>http://paulklemm.com/blog/2012-08-20-install-python-together-with-vtk-using-homebrew-for-mountain-lion/</link>
      <pubDate>Mon, 20 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://paulklemm.com/blog/2012-08-20-install-python-together-with-vtk-using-homebrew-for-mountain-lion/</guid>
      <description>

&lt;p&gt;In this post I&amp;rsquo;d like to show you how to install &lt;code&gt;Python&lt;/code&gt; with support for &lt;code&gt;VTK&lt;/code&gt; and &lt;code&gt;Qt&lt;/code&gt; using Apple OS X 10.8 Mountain Lion. Then I set up &lt;code&gt;Eclipse&lt;/code&gt; with the new &lt;code&gt;Python&lt;/code&gt; installation in order to use all of it&amp;rsquo;s auto-completion and debugging capabilities. Please leave a comment with your experiences using this.&lt;/p&gt;

&lt;p&gt;The instructions for the installation of &lt;code&gt;Python&lt;/code&gt; and &lt;code&gt;Qt&lt;/code&gt; consists mostly of information from these two posts &lt;a href=&#34;http://www.thisisthegreenroom.com/2011/installing-python-numpy-scipy-matplotlib-and-ipython-on-lion/&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;http://jbowles.github.com/blog/2012/04/22/python/&#34;&gt;[2]&lt;/a&gt;, so please credit these guys for this, not me.&lt;/p&gt;

&lt;p&gt;If you run a Windows or Linux machine and you might want to do yourself a favor and use the &lt;a href=&#34;http://graphics.tudelft.nl/Projects/DeVIDE&#34;&gt;DRE which is included in DeVIDE&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;install-and-configure-homebrew&#34;&gt;Install and configure Homebrew&lt;/h2&gt;

&lt;p&gt;As a very first step you need to install &lt;em&gt;Homebrew&lt;/em&gt;, the friendly packet manager for Mac OS X &lt;a href=&#34;http://mxcl.github.com/homebrew/&#34;&gt;[3]&lt;/a&gt;. This makes it really easy to install all the necessary stuff. While OS X already ships with versions of &lt;code&gt;Python&lt;/code&gt;, &lt;code&gt;Ruby&lt;/code&gt; and other stuff, the versions they provide are often deprecated and installing own packages can be quite frustrating. Homebrew installs all it&amp;rsquo;s stuff isolated from the system under &lt;code&gt;/usr/local/cellar&lt;/code&gt;. This way you can install your own libraries without touching the components installed from Apple.&lt;/p&gt;

&lt;p&gt;In order make sure that Terminal searches the &lt;code&gt;bin&lt;/code&gt; folder of Homebrew first before the System &lt;code&gt;bin&lt;/code&gt; folder (which is &lt;code&gt;/usr/bin&lt;/code&gt;), you need to add it to the &lt;code&gt;PATH&lt;/code&gt;-variable. This can be done by editing the &lt;code&gt;.bash_profile&lt;/code&gt; file in you user root folder &lt;code&gt;/Users/&amp;lt;your username&amp;gt;/.bash_profile&lt;/code&gt; (further referenced as &lt;code&gt;~/&lt;/code&gt;). If this file doesn&amp;rsquo;t exist, create it! Now you add
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# ~/.bash_profile&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;/usr/local/bin:&lt;span style=&#34;color: #f8f8f2&#34;&gt;$PATH&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;/usr/local/share/python:&lt;span style=&#34;color: #f8f8f2&#34;&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

to the file. The second entry is later used to get the right version of &lt;code&gt;PIP&lt;/code&gt;.
Note: If you have a Terminal session up and running you need to restart it in order to apply the changes to the &lt;code&gt;PATH&lt;/code&gt;. If you have trouble with hidden files on the system, &lt;a href=&#34;http://totalfinder.binaryage.com/&#34;&gt;this Tool&lt;/a&gt; can come in handy for you!&lt;/p&gt;

&lt;p&gt;Before you install anything to Homebrew, be sure to run &lt;code&gt;brew doctor&lt;/code&gt; and &lt;code&gt;brew update&lt;/code&gt; to check if all dependencies are installed (&lt;code&gt;xCode&lt;/code&gt;, &lt;code&gt;Command Line Tools&lt;/code&gt; and &lt;code&gt;x11&lt;/code&gt;). When &lt;code&gt;brew doctor&lt;/code&gt; gives you green light you are good to go!&lt;/p&gt;

&lt;h2 id=&#34;install-python&#34;&gt;Install Python&lt;/h2&gt;

&lt;p&gt;The very first step is that you install your own version of &lt;code&gt;Python&lt;/code&gt; by running the following command:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;brew install python --framework --universal
&lt;/pre&gt;&lt;/div&gt;

In order to make it the default &lt;code&gt;Python&lt;/code&gt; installation of the system you need to execute
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /System/Library/Frameworks/Python.framework/Versions
sudo rm Current
ln -s /usr/local/Cellar/python/2.7.2/Frameworks/Python.framework/Versions/Current
&lt;/pre&gt;&lt;/div&gt;

This changes the symlink to our new &lt;code&gt;Python&lt;/code&gt; installation. You will be promted for you password since this is an action which requires admin rights.&lt;/p&gt;

&lt;p&gt;If everything worked, &lt;code&gt;which python&lt;/code&gt; should return &lt;code&gt;/usr/local/bin/python&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next step is the installation of &lt;code&gt;PIP&lt;/code&gt; using the command
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;easy_install pip
&lt;/pre&gt;&lt;/div&gt;

Now &lt;code&gt;which pip&lt;/code&gt; should return &lt;code&gt;/usr/local/share/python/pip&lt;/code&gt; - otherwise the &lt;code&gt;PATH&lt;/code&gt; is not properly set as described above.&lt;/p&gt;

&lt;p&gt;Now you can install other Packages like &lt;code&gt;Numpy&lt;/code&gt; or &lt;code&gt;Scipy&lt;/code&gt; - depending on what you need. Note: If you want to install &lt;code&gt;Scipy&lt;/code&gt; you need to install the &lt;code&gt;gfortran&lt;/code&gt; compiler.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;pip install numpy
brew install gfortran
pip install scipy
&lt;/pre&gt;&lt;/div&gt;

Note: To date of this post, you have to use the developer version of &lt;code&gt;Scipy&lt;/code&gt; to make it work under Mountain Lion. This can be done using
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;pip install -e git+https://github.com/scipy/scipy#egg&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;scipy-dev
&lt;/pre&gt;&lt;/div&gt;

This will create a folder &lt;code&gt;~/src&lt;/code&gt; and install &lt;code&gt;Scipy&lt;/code&gt; from there.&lt;/p&gt;

&lt;h2 id=&#34;install-qt&#34;&gt;Install Qt&lt;/h2&gt;

&lt;p&gt;To install &lt;code&gt;Qt&lt;/code&gt; and &lt;code&gt;Pyqt&lt;/code&gt;-bindings you execute
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;brew install qt
brew install pyqt
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;install-vtk&#34;&gt;Install VTK&lt;/h2&gt;

&lt;p&gt;To install VTK you need to run
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;brew install vtk --tcl --qt --python --pyqt --examples
&lt;/pre&gt;&lt;/div&gt;

This took about 60 minutes on my early 2008 Macbook Pro, so take your time for a well-earned rest.&lt;/p&gt;

&lt;p&gt;When this is done you should be able to &lt;code&gt;import vtk&lt;/code&gt; into your &lt;code&gt;Python&lt;/code&gt; environment without any errors.&lt;/p&gt;

&lt;h2 id=&#34;setup-python-for-use-with-eclipse&#34;&gt;Setup Python for use with Eclipse&lt;/h2&gt;

&lt;p&gt;This part is oriented on the introduction on how to include the &lt;code&gt;DRE&lt;/code&gt; into &lt;code&gt;Eclipse&lt;/code&gt;, which can be found under &lt;a href=&#34;http://code.google.com/p/devide/wiki/EclipseDRE&#34;&gt;[4]&lt;/a&gt; and in the following screencast. I just made a few enhancements to make it work for this application. Note that the steps of the screencast don&amp;rsquo;t work exactly on our installation!
&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-b1zS536R2M&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;To use &lt;code&gt;Python&lt;/code&gt; together with &lt;code&gt;Eclipse&lt;/code&gt; you have to install the &lt;em&gt;Classic&lt;/em&gt; Version from &lt;a href=&#34;http://www.eclipse.org/downloads/&#34;&gt;the official homepage&lt;/a&gt;. Next, &lt;a href=&#34;http://pydev.org/manual_101_install.html&#34;&gt;install PyDev into Eclipse&lt;/a&gt;. Now you need to tell &lt;code&gt;Eclipse&lt;/code&gt; which &lt;code&gt;Python&lt;/code&gt; installation it should use. This can be done in &lt;code&gt;Eclipse ‚Üí Settings ‚Üí Pydev ‚Üí Interpreter-Python ‚Üí New&lt;/code&gt;. In the next Dialog you have to add Path to the Homebrew &lt;code&gt;Python&lt;/code&gt;.

&lt;figure &gt;
    
        &lt;img src=&#34;http://paulklemm.com/blog/blog/media/2012-08-20-install-python-together-with-vtk-using-homebrew-for-mountain-lion/selectPythonInterpreter.png&#34; /&gt;
    
    
&lt;/figure&gt;

Confirm the next Prompt which should look like the following screenshot and you are done.

&lt;figure &gt;
    
        &lt;img src=&#34;http://paulklemm.com/blog/blog/media/2012-08-20-install-python-together-with-vtk-using-homebrew-for-mountain-lion/selectPythonPackages.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Now you are good to go. Create a new PyDev Project, select the new created interpreter and play around with &lt;code&gt;VTK&lt;/code&gt; - it all should be working with auto completion and the other neat &lt;code&gt;Eclipse&lt;/code&gt; features. The Code example Charl used in the Screencast should compile:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# vtkDonutTest.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# create a donut polydata source&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkSuperquadricSource()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ToroidalOn()&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# connect it to a polydatamapper&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkPolyDataMapper()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SetInput(s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;GetOutput())&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# and finally create an actor to represent the donut in the scene&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkActor()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SetMapper(m)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# the renderer is the 3D scene&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;ren&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkRenderer()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;ren&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AddActor(a)&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# renderwindow to contain the 3D scene&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;rw&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkRenderWindow()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;rw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AddRenderer(ren)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# we want the user to interact&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;iren&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkRenderWindowInteractor()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;iren&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SetRenderWindow(rw)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# get the whole business going&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;iren&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Initialize()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;rw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Render()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;iren&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To test the Qt-Support you can run the following code &lt;a href=&#34;https://svn.enthought.com/svn/enthought/Mayavi/trunk/enthought/tvtk/pyface/ui/qt4/QVTKRenderWindowInteractor.py&#34;&gt;[5]&lt;/a&gt;:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# vtkQtTest.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PyQt4&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QtGui&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk.qt4.QVTKRenderWindowInteractor&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QVTKRenderWindowInteractor&lt;/span&gt;

&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;A simple example that uses the QVTKRenderWindowInteractor class.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# every QT app needs an app&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QtGui&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;QApplication([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;QVTKRenderWindowInteractor&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# create the widget&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;widget&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QVTKRenderWindowInteractor()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;widget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Initialize()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;widget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Start()&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# if you dont want the &amp;#39;q&amp;#39; key to exit comment this.&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;widget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AddObserver(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ExitEvent&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;lambda&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;o,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;e,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;app:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;quit())&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;ren&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkRenderer()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;widget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;GetRenderWindow()&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AddRenderer(ren)&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;cone&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkConeSource()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SetResolution(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;coneMapper&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkPolyDataMapper()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;coneMapper&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SetInput(cone&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;GetOutput())&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;coneActor&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkActor()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;coneActor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SetMapper(coneMapper)&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;ren&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AddActor(coneActor)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# show the widget&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;widget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;show()&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# start event processing&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;exec_()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;add-vtk-module-to-qt-designer&#34;&gt;Add VTK-Module to Qt-Designer&lt;/h2&gt;

&lt;p&gt;If you want to use the &lt;code&gt;Qt-Designer&lt;/code&gt; for the use with &lt;code&gt;VTK&lt;/code&gt;, things get a little bit tricky. The &lt;code&gt;Qt-Designer&lt;/code&gt; comes with our installation of &lt;code&gt;Qt&lt;/code&gt; under &lt;code&gt;/usr/local/Cellar/qt/4.8.2/Designer.app&lt;/code&gt; and is a &lt;em&gt;WYSISWYG&lt;/em&gt;-Editor for &lt;code&gt;Qt&lt;/code&gt;-UIs. &lt;code&gt;VTK&lt;/code&gt; already has installed a plugin for it, it just has to be sym-linked into the &lt;code&gt;Qt-Designer&lt;/code&gt;-Path. You can do this using the following commands, but check your current versions before running these.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /usr/local/Cellar/qt/4.8.2/plugins/designer
ln -s /usr/local/Cellar/vtk/5.10.0/plugins/designer/libQVTKWidgetPlugin.dylib libQVTKWidgetPlugin.dylib
&lt;/pre&gt;&lt;/div&gt;

Now you should have a QVTKWidget available in the &lt;code&gt;Qt-Designer&lt;/code&gt;. The tricky part begins now. Unfortunately when you try to include a &lt;code&gt;Qt&lt;/code&gt;-UI which contains a &lt;code&gt;QVTKWidget&lt;/code&gt;, it fails to compile, because &lt;code&gt;QVTKWidget&lt;/code&gt; belongs to the Class &lt;code&gt;QVTKWidget.QVTKWidget&lt;/code&gt;, while the correct class is &lt;code&gt;vtk.QVTKWidget&lt;/code&gt;. You can fix this using the following workaround.&lt;/p&gt;

&lt;p&gt;When you have created your UI using the &lt;code&gt;Qt-Designer&lt;/code&gt; you can convert it to &lt;code&gt;Python&lt;/code&gt;-Code using the command
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;pyuic4 myTestApp.ui &amp;gt; myTestApp_ui.py
&lt;/pre&gt;&lt;/div&gt;

Import the new file into your Project and change the line
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QVTKWidget&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QVTKWidget&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

to
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QVTKWidget&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Now it will compile and run. The tradeoff is that you have to manually change this line every time you want to make changes to the UI using the &lt;code&gt;Qt-Designer&lt;/code&gt;.
To give an example for a converted UI file which runs, look at the following code.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# pythonQtVTKTest.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PyQt4&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QtGui&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pythonQtVTKTest_ui&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Ui_Form_Main&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;StartQT4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(QtGui&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;QMainWindow):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;parent&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;None):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;QtGui&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;QWidget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;__init__(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;parent)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ui&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Ui_Form_Main()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;setupUi(self)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;draw_stuff()&lt;/span&gt;    
    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;draw_stuff&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# create a donut polydata source&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkSuperquadricSource()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ToroidalOn()&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# connect it to a polydatamapper&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkPolyDataMapper()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SetInput(s&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;GetOutput())&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# and finally create an actor to represent the donut in the scene&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkActor()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SetMapper(m)&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;# the renderer is the 3D scene&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;ren&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkRenderer()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;ren&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AddActor(a)&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# renderwindow to contain the 3D scene&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;rw&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkRenderWindow()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;rw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AddRenderer(ren)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ui&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;qvtkWidget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;GetRenderWindow()&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;AddRenderer(ren)&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;# we want the user to interact&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;iren&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;vtkRenderWindowInteractor()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;iren&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SetRenderWindow(rw)&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;# get the whole business going&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;iren&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Initialize()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;rw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Render()&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;#iren.Start()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__name__&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QtGui&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;QApplication(sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;myapp&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StartQT4()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;myapp&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;show()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(app&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;exec_())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# pythonQtVTKTest_UI.py&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Form implementation generated from reading ui file &amp;#39;pythonQtVTKTest.ui&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# Created: Tue Aug 21 15:40:57 2012&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#      by: PyQt4 UI code generator 4.9.4&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# WARNING! All changes made in this file will be lost!&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PyQt4&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QtCore,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QtGui&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;_fromUtf8&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QtCore&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;QString&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fromUtf8&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;AttributeError&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;_fromUtf8&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;lambda&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Ui_Form_Main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(object):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;setupUi&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Form_Main):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;Form_Main&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;setObjectName(_fromUtf8(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Form_Main&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;Form_Main&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;setEnabled(True)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;Form_Main&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;resize(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;623&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;462&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;qvtkWidget&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QVTKWidget(Form_Main)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;qvtkWidget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;setGeometry(QtCore&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;QRect(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;601&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;441&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;qvtkWidget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;setObjectName(_fromUtf8(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;qvtkWidget&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;retranslateUi(Form_Main)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;QtCore&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;QMetaObject&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;connectSlotsByName(Form_Main)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;retranslateUi&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Form_Main):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;Form_Main&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;setWindowTitle(QtGui&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;QApplication&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;translate(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Form_Main&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;VTK Test&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QtGui&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;QApplication&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;UnicodeUTF8))&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;vtk&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QVTKWidget&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;If anyone knows a simpler solution to this, please post it in the comments!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-mactex-and-homebrew&#34;&gt;Using MacTeX and Homebrew&lt;/h2&gt;

&lt;p&gt;Just a short footnote for those of you who use &lt;code&gt;MacTeX&lt;/code&gt;. &lt;code&gt;MacTeX&lt;/code&gt; stores it&amp;rsquo;s files under &lt;code&gt;/usr/local/texlive&lt;/code&gt; next to the &lt;code&gt;Homebrew&lt;/code&gt; stuff. They coexist peaceful next to each other, you just have to apply some diplomacy using the following command &lt;a href=&#34;https://github.com/ThinkRuby/thinkruby/wiki/&#34;&gt;[6]&lt;/a&gt;.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo chown -R &lt;span style=&#34;color: #f8f8f2&#34;&gt;$USER&lt;/span&gt;:staff /usr/local
&lt;/pre&gt;&lt;/div&gt;

You might also consult the &lt;code&gt;brew doctor&lt;/code&gt;, he will tell you what to do.&lt;/p&gt;

&lt;h2 id=&#34;thats-it&#34;&gt;Thats it&lt;/h2&gt;

&lt;p&gt;Thank you for reading, I hope these instructions help you in some way. Please feel free to leave a comment. Have a nice day!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thisisthegreenroom.com/2011/installing-python-numpy-scipy-matplotlib-and-ipython-on-lion/&#34;&gt;[1] http://www.thisisthegreenroom.com/2011/installing-python-numpy-scipy-matplotlib-and-ipython-on-lion/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://jbowles.github.com/blog/2012/04/22/python/&#34;&gt;[2] http://jbowles.github.com/blog/2012/04/22/python/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://mxcl.github.com/homebrew/&#34;&gt;[3] http://mxcl.github.com/homebrew/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://code.google.com/p/devide/wiki/EclipseDRE&#34;&gt;[4] http://code.google.com/p/devide/wiki/EclipseDRE&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://svn.enthought.com/svn/enthought/Mayavi/trunk/enthought/tvtk/pyface/ui/qt4/QVTKRenderWindowInteractor.py&#34;&gt;[5] https://svn.enthought.com/svn/enthought/Mayavi/trunk/enthought/tvtk/pyface/ui/qt4/QVTKRenderWindowInteractor.py&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/ThinkRuby/thinkruby/wiki/&#34;&gt;[6] https://github.com/ThinkRuby/thinkruby/wiki/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;this-might-also-be-useful-for-you&#34;&gt;This might also be useful for you&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://graphics.tudelft.nl/Projects/DeVIDE&#34;&gt;DeVIDE/DRE from the University of Delft&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://totalfinder.binaryage.com/&#34;&gt;Total Finder&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://macromates.com/&#34;&gt;My favorite Editor: Textmate&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rkblog.rk.edu.pl/w/p/introduction-pyqt4/&#34;&gt;Great collection of Python/Qt Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>